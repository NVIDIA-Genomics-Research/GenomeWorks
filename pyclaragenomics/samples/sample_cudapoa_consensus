#!/usr/bin/env python

import argparse
import os.path

from claragenomics.bindings import cuda
from claragenomics.bindings import cudapoa
from claragenomics.io.utils import read_poa_group_file

"""
Sample program for using CUDAPOA Python API for consensus generation.
"""

def run_cudapoa_consensus(groups):
    # Get avaialble memory information
    free, total = cuda.cuda_get_mem_info(cuda.cuda_get_device())

    # Create batch
    max_sequences_per_poa = 500
    gpu_mem_per_batch = 0.9 * free
    batch = cudapoa.CudaPoaBatch(max_sequences_per_poa, gpu_mem_per_batch, stream=None, output_type="consensus")

    # Add poa groups to batch
    initial_count = 0
    for i, group in enumerate(groups):
        group_status, seq_status = batch.add_poa_group(group)
        if (group_status == 0):
            pass

        # Once batch is full, run POA processing
        if ((group_status == 1) or (i == len(groups) - 1)):
            batch.generate_poa()
            consensus, coverage, status = batch.get_consensus()
            batch.reset()
            print("Processed group {} - {}".format(initial_count, i))
            initial_count = i

if __name__ == "__main__":
    cwd = os.path.dirname(os.path.abspath(__file__))
    cga_root = os.path.dirname(os.path.dirname(cwd))
    cudapoa_data_dir = os.path.join(cga_root, "cudapoa", "data")
    sample_windows = os.path.join(cudapoa_data_dir, "sample-windows.txt")
    
    groups = read_poa_group_file(sample_windows, 10000)
    run_cudapoa_consensus(groups)
